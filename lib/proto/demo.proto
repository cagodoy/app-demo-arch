syntax = "proto3";

package proto;

// ------------------- Base -------------------

message Meta {}

message Error {
  int32 code = 1;
  string message = 2;
}

message Empty {}

message Coord {
  string latitude = 1;
  string longitude = 2;
}

// ------------------- Users -------------------

service UserService {
	rpc UserGet(UserGetRequest) returns (UserGetResponse) {}
	rpc UserGetByEmail(UserGetByEmailRequest) returns (UserGetByEmailResponse) {}
  rpc UserCreate(UserCreateRequest) returns (UserCreateResponse) {}
	rpc UserVerifyPassword(UserVerifyPasswordRequest) returns (UserVerifyPasswordResponse)  {}
  rpc UserList(UserListRequest) returns (UserListResponse) {}

  //
  // TODO(ca): below methods are not implemented.
  //
  // rpc Update(UpdateRequest) returns (UpdateResponse) {}
  // rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}

message User {
	string id = 1;
	string email = 2;
	string name = 3;
	string password = 4;

	int64 created_at = 5;
	int64 updated_at = 6;
}

message UserGetRequest {
	string user_id = 1;
}

message UserGetResponse {
  User data = 1;
  Meta meta = 2;
  Error error = 3;
}

message UserGetByEmailRequest {
	string email = 1;
}

message UserGetByEmailResponse {
  User data = 1;
  Meta meta = 2;
  Error error = 3;
}

message UserCreateRequest {
  User data = 1;
}

message UserCreateResponse {
  User data = 1;
  Meta meta = 2;
  Error error = 3;
}

message UserVerifyPasswordRequest {
	string email = 1;
	string password = 2;
}

message UserVerifyPasswordResponse {
  bool valid = 1;
  Error error = 2;
}

message UserListRequest {}

message UserListResponse {
  repeated User data = 1;
  Meta meta = 2;
  Error error = 3;
}

// ------------------- Auth -------------------

service AuthService {
  rpc VerifyToken (AuthVerifyTokenRequest) returns (AuthVerifyTokenResponse) {}
  rpc Login (AuthLoginRequest) returns (AuthLoginResponse) {}
  rpc SignUp (AuthSignupRequest) returns (AuthSignupResponse) {}

  //
  // TODO(ca): below methods are not implemented.
  //
  // rpc Logout (AuthLogoutRequest) returns (AuthLogoutResponse) {}
  // rpc ForgotPassword (AuthForgotPasswordRequest) returns (AuthForgotPasswordResponse) {}
  // rpc RecoverPassword (AuthRecoverPasswordRequest) returns (AuthRecoverPasswordResponse) {}
}

message Token {
  string token = 1;
}

message AuthVerifyTokenRequest {
  string token = 1;
}

message AuthVerifyTokenResponse {
  bool valid = 1;
  Error error = 2;
}

message AuthLoginRequest {
  string email = 1;
  string password = 2;
}

message AuthLoginResponse {
  User data = 1;
  Token meta = 2;
  Error error = 3;
}

message AuthSignupRequest {
  User user = 1;
}

message AuthSignupResponse {
  User data = 1;
  Token meta = 2;
  Error error = 3;
}

message AuthLogoutRequest {
  string token = 1;
}

message AuthLogoutResponse {
  Error error = 1;
}

message AuthForgotPasswordRequest {
  string email = 1;
}

message AuthForgotPasswordResponse {
  Error error = 1;
}

message AuthRecoverPasswordRequest {
  string password = 1;
}

message AuthRecoverPasswordResponse {
  Error error = 1;
}

// ------------------- Restaurant -------------------

service RestaurantService {
  rpc ListByCoord(RestaurantListByCoordRequest) returns (RestaurantListByCoordResponse) {}
}

message Restaurant {
  string id = 1;
  string name = 2;
  string rating = 3;
  string address = 4;
  bool open = 5;
  string photo_reference = 6;
  Coord coord = 7;
}

message RestaurantListByCoordRequest {
  Coord coord = 1;
  string page_token = 2;
}

message MetaRestaurantListByCoord {
  string page_token = 1;
}

message RestaurantListByCoordResponse {
  repeated Restaurant data = 1;
  MetaRestaurantListByCoord meta = 2;
  Error error = 3;
}

// ------------------- History ------------------- 

service HistoryService {
  rpc ListHistoryByUserId(HistoryListByUserIdRequest) returns (HistoryListByUserIdResponse) {}
}

message History {
  string user_id = 1;
  string latitude = 2;
  string longitude = 3;

  int64 created_at = 4;
	int64 updated_at = 5;
}

message HistoryListByUserIdRequest {
  string user_id = 1;
} 

message HistoryListByUserIdResponse {
  repeated History data = 1;
  Meta meta = 2;
  Error error = 3;
}
